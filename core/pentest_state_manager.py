"""
Pentest State Manager
Tracks and displays pentest progress and state in real-time
"""

import time
from enum import Enum
from typing import Dict, List, Optional
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.live import Live
from rich.layout import Layout
from rich import box
from utils.logger import get_logger

console = Console()
logger = get_logger(__name__)


class PentestPhase(Enum):
    """Pentest phase enumeration."""
    INITIALIZATION = "initialization"
    RECONNAISSANCE = "reconnaissance"
    CRAWLING = "crawling"
    VULNERABILITY_SCANNING = "vulnerability_scanning"
    EXPLOITATION = "exploitation"
    REPORTING = "reporting"
    COMPLETED = "completed"


class AttackState(Enum):
    """Attack state enumeration."""
    PENDING = "pending"
    IN_PROGRESS = "in_progress"
    SUCCESS = "success"
    FAILED = "failed"
    SKIPPED = "skipped"


class PentestStateManager:
    """Manage and display pentest state and progress."""
    
    def __init__(self, target_url: str):
        """Initialize pentest state manager."""
        self.target_url = target_url
        self.current_phase = PentestPhase.INITIALIZATION
        self.start_time = datetime.now()
        self.phase_start_time = datetime.now()
        
        # State tracking
        self.phases_completed = []
        self.current_attack = None
        self.attacks_history = []
        
        # Statistics
        self.urls_discovered = 0
        self.urls_tested = 0
        self.vulnerabilities_found = 0
        self.vulnerability_breakdown = {
            'critical': 0,
            'high': 0,
            'medium': 0,
            'low': 0,
            'info': 0
        }
        
        # Attack tracking
        self.attacks_by_type = {}
        self.current_url_testing = None
        
        # Live display
        self.live_display = None
        self.display_enabled = True
    
    def set_phase(self, phase: PentestPhase):
        """Set current pentest phase."""
        if self.current_phase != phase:
            self.phases_completed.append({
                'phase': self.current_phase,
                'duration': (datetime.now() - self.phase_start_time).total_seconds()
            })
            self.current_phase = phase
            self.phase_start_time = datetime.now()
            logger.info(f"Phase changed to: {phase.value}")
    
    def start_attack(self, attack_type: str, target: str, payload: Optional[str] = None):
        """Record start of an attack."""
        self.current_attack = {
            'type': attack_type,
            'target': target,
            'payload': payload,
            'state': AttackState.IN_PROGRESS,
            'start_time': time.time()
        }
        
        if attack_type not in self.attacks_by_type:
            self.attacks_by_type[attack_type] = {
                'total': 0,
                'success': 0,
                'failed': 0
            }
        
        self.attacks_by_type[attack_type]['total'] += 1
        self.current_url_testing = target
    
    def end_attack(self, success: bool, evidence: Optional[str] = None):
        """Record end of an attack."""
        if self.current_attack:
            self.current_attack['state'] = AttackState.SUCCESS if success else AttackState.FAILED
            self.current_attack['end_time'] = time.time()
            self.current_attack['duration'] = self.current_attack['end_time'] - self.current_attack['start_time']
            self.current_attack['evidence'] = evidence
            
            attack_type = self.current_attack['type']
            if success:
                self.attacks_by_type[attack_type]['success'] += 1
            else:
                self.attacks_by_type[attack_type]['failed'] += 1
            
            self.attacks_history.append(self.current_attack.copy())
            self.current_attack = None
    
    def add_vulnerability(self, severity: str):
        """Record a found vulnerability."""
        self.vulnerabilities_found += 1
        severity_lower = severity.lower()
        if severity_lower in self.vulnerability_breakdown:
            self.vulnerability_breakdown[severity_lower] += 1
    
    def update_urls(self, discovered: int = 0, tested: int = 0):
        """Update URL statistics."""
        if discovered > 0:
            self.urls_discovered += discovered
        if tested > 0:
            self.urls_tested += tested
    
    def get_elapsed_time(self) -> str:
        """Get elapsed time since start."""
        elapsed = datetime.now() - self.start_time
        hours = int(elapsed.total_seconds() // 3600)
        minutes = int((elapsed.total_seconds() % 3600) // 60)
        seconds = int(elapsed.total_seconds() % 60)
        
        if hours > 0:
            return f"{hours}h {minutes}m {seconds}s"
        elif minutes > 0:
            return f"{minutes}m {seconds}s"
        else:
            return f"{seconds}s"
    
    def get_phase_elapsed_time(self) -> str:
        """Get elapsed time for current phase."""
        elapsed = datetime.now() - self.phase_start_time
        seconds = int(elapsed.total_seconds())
        return f"{seconds}s"
    
    def generate_status_table(self) -> Table:
        """Generate status table for display."""
        table = Table(box=box.ROUNDED, show_header=True, header_style="bold cyan")
        table.add_column("Metric", style="cyan", width=25)
        table.add_column("Value", style="white", width=30)
        
        # Add rows
        table.add_row("🎯 Target", self.target_url)
        table.add_row("⏱️  Elapsed Time", self.get_elapsed_time())
        table.add_row("📍 Current Phase", self.current_phase.value.replace('_', ' ').title())
        table.add_row("⏲️  Phase Time", self.get_phase_elapsed_time())
        table.add_row("🔗 URLs Discovered", str(self.urls_discovered))
        table.add_row("✅ URLs Tested", str(self.urls_tested))
        table.add_row("🐛 Vulnerabilities", str(self.vulnerabilities_found))
        
        if self.current_url_testing:
            table.add_row("🔍 Testing", self.current_url_testing[:45] + "...")
        
        return table
    
    def generate_vulnerability_table(self) -> Table:
        """Generate vulnerability breakdown table."""
        table = Table(box=box.ROUNDED, show_header=True, header_style="bold magenta")
        table.add_column("Severity", style="bold", width=15)
        table.add_column("Count", justify="right", style="white", width=10)
        
        severity_colors = {
            'critical': 'bold red',
            'high': 'red',
            'medium': 'yellow',
            'low': 'cyan',
            'info': 'blue'
        }
        
        for severity, count in self.vulnerability_breakdown.items():
            if count > 0:
                color = severity_colors.get(severity, 'white')
                table.add_row(
                    f"[{color}]{severity.upper()}[/{color}]",
                    f"[{color}]{count}[/{color}]"
                )
        
        return table
    
    def generate_attack_table(self) -> Table:
        """Generate attack statistics table."""
        table = Table(box=box.ROUNDED, show_header=True, header_style="bold yellow")
        table.add_column("Attack Type", style="yellow", width=20)
        table.add_column("Total", justify="right", width=8)
        table.add_column("Success", justify="right", style="green", width=8)
        table.add_column("Failed", justify="right", style="red", width=8)
        
        for attack_type, stats in self.attacks_by_type.items():
            success_rate = (stats['success'] / stats['total'] * 100) if stats['total'] > 0 else 0
            table.add_row(
                attack_type.replace('_', ' ').title(),
                str(stats['total']),
                str(stats['success']),
                str(stats['failed'])
            )
        
        return table
    
    def generate_current_attack_panel(self) -> Optional[Panel]:
        """Generate panel for current attack."""
        if not self.current_attack:
            return None
        
        attack = self.current_attack
        content = f"""
[bold cyan]Type:[/bold cyan] {attack['type'].replace('_', ' ').title()}
[bold cyan]Target:[/bold cyan] {attack['target'][:60]}...
[bold cyan]Payload:[/bold cyan] {attack.get('payload', 'N/A')[:50]}...
[bold cyan]Status:[/bold cyan] [yellow]IN PROGRESS[/yellow]
        """.strip()
        
        return Panel(
            content,
            title="🎯 Current Attack",
            border_style="yellow",
            box=box.ROUNDED
        )
    
    def generate_layout(self) -> Layout:
        """Generate complete layout for display."""
        layout = Layout()
        
        layout.split(
            Layout(name="header", size=3),
            Layout(name="main", ratio=1),
            Layout(name="footer", size=3)
        )
        
        # Header
        layout["header"].update(
            Panel(
                "[bold cyan]🔍 Deep Eye - Real-Time Pentest Monitor[/bold cyan]",
                style="bold white on blue"
            )
        )
        
        # Main area
        layout["main"].split_row(
            Layout(name="left"),
            Layout(name="right")
        )
        
        layout["main"]["left"].split(
            Layout(name="status"),
            Layout(name="attack")
        )
        
        layout["main"]["right"].split(
            Layout(name="vulnerabilities"),
            Layout(name="attacks")
        )
        
        # Populate panels
        layout["main"]["left"]["status"].update(
            Panel(self.generate_status_table(), title="📊 Status", border_style="cyan")
        )
        
        current_attack_panel = self.generate_current_attack_panel()
        if current_attack_panel:
            layout["main"]["left"]["attack"].update(current_attack_panel)
        else:
            layout["main"]["left"]["attack"].update(
                Panel("[dim]No active attack[/dim]", title="🎯 Current Attack", border_style="dim")
            )
        
        layout["main"]["right"]["vulnerabilities"].update(
            Panel(self.generate_vulnerability_table(), title="🐛 Vulnerabilities", border_style="magenta")
        )
        
        layout["main"]["right"]["attacks"].update(
            Panel(self.generate_attack_table(), title="⚔️  Attack Statistics", border_style="yellow")
        )
        
        # Footer
        layout["footer"].update(
            Panel(
                f"[dim]Last Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}[/dim]",
                style="dim"
            )
        )
        
        return layout
    
    def display_summary(self):
        """Display final summary."""
        console.print("\n")
        console.print("═" * 80, style="cyan")
        console.print("[bold cyan]📋 Pentest Summary[/bold cyan]")
        console.print("═" * 80, style="cyan")
        
        # Status table
        console.print(self.generate_status_table())
        console.print()
        
        # Vulnerability breakdown
        if self.vulnerabilities_found > 0:
            console.print(self.generate_vulnerability_table())
            console.print()
        
        # Attack statistics
        if self.attacks_by_type:
            console.print(self.generate_attack_table())
            console.print()
        
        console.print("═" * 80, style="cyan")
    
    def get_state_dict(self) -> Dict:
        """Get current state as dictionary."""
        return {
            'target': self.target_url,
            'phase': self.current_phase.value,
            'elapsed_time': self.get_elapsed_time(),
            'urls_discovered': self.urls_discovered,
            'urls_tested': self.urls_tested,
            'vulnerabilities_found': self.vulnerabilities_found,
            'vulnerability_breakdown': self.vulnerability_breakdown,
            'attacks_by_type': self.attacks_by_type,
            'phases_completed': self.phases_completed
        }

